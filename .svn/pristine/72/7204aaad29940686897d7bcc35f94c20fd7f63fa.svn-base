package edu.southalabama.csc527.smallworld.model;

import java.util.HashSet;
import java.util.Set;

public abstract class Monster extends Fighter {

	//---------------Jiang's Notes--------------------//
	// Those are my general ideas about Monster below.
	// However, A great problem is that I don't really 
	// understand about the guarding directions and how 
	// the monster guards it.
	//-----------------------------------------------//
	/**
	 * Constructs a new Monster instance. Only to be invoked by the {@link World} class.
	 * 
	 * @param world
	 *            the {@link World} instance this exists within.
	 * @param name
	 *            a non-null unique name for the instance. The uniqueness of the
	 *            name can't be dependent upon case, e.g., "Hall" is considered
	 *            the same as "hall".
	 * @param article
	 *            the appropriate non-null indefinite article with which to
	 *            prefix the name so as to form a proper short description,
	 *            e.g., "the" or "a".
	 * @param description
	 *            a long, possibly mult-line, non-null description of this
	 *            thing.
	 * @param guarding
	 *            the set of directions guarded by monster.   
	 * @param beatMonPointsAward
	 *            the points awarded when the Player beat the monster.        
	 */
	public Monster(World world, String name, String article, String description, 
			       Set<Direction> guarding, int beatMonPointsAward) {
		super(world, name, article, description);
		setLocation(world.getNowherePlace());
		f_stats = null;
		f_guarding = guarding;
		f_beatMonPt.setPoints(beatMonPointsAward);	
	}
	
	/**
	 *  the points awarded when the Player beat the Monster. 
	 */
	private final PointAward f_beatMonPt = new PointAward(0);
	
	/**
	 *  Gets the points awarded when the Player beat the Monster. 
	 */
	public PointAward getBeatMonPointsAward() {
		return f_beatMonPt;
	}
	
	/**
	 * Returns the non-null location of this Monster.
	 * 
	 * @return the location of this Monster
	 */
	public Place getLocation() {
		return (Place) super.getLocation();
	}
	
	/**
	 * Sets the location of the parameter location to be located 
	 * in this instance of Monster
	 * 
	 * @param t
	 * 		where this Thing should now be located at
	 */
	public void setLocation(Thing location) {
		assert(location instanceof Place);
		super.setLocation(location);
	}

	/**
	 * The monster state, initialized to 0, which stores the value of the states
	 * accumulated by the monster during the fight.
	 */
	private Stats f_stats = new Stats(0, 0, 0, 0, 0, 0, "");
	
	/**
	 * Returns the state of this Monster.
	 * 
	 * @return the state of this Monster.
	 */
	public Stats getMonStats() {
		return f_stats;
	}
	
	/**
	 * The directions guarded by Monster.
	 */
	Set<Direction> f_guarding = new HashSet<Direction>();
	
	/**
	 * Gets the directions guarded by Monster.
	 * 
	 * @return the directions guarded by Monster.
	 */
	public Set<Direction> getGuarding(){
		return new HashSet<Direction>(f_guarding);
	}
	
}
